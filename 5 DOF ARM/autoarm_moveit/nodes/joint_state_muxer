#!/usr/bin/python
import rospy
from sensor_msgs.msg import JointState
from urdf_parser_py.urdf import URDF
from math import pi

def get_param(name, value=None):
    private = "~%s" % name
    if rospy.has_param(private):
        return rospy.get_param(private)
    elif rospy.has_param(name):
        return rospy.get_param(name)
    else:
        return value

class JointStateMuxer():

    def __init__(self):

        robot = URDF().from_parameter_server()
        self.free_joints = {}
        self.dependent_joints = get_param("dependent_joints", {})

        for joint in robot.joints:
            jtype = joint.joint_type
            if jtype == 'fixed':
                continue
            name = joint.name
            if jtype == 'continuous' or joint.limit is None:
                minval = -pi
                maxval = pi
            else:
                minval = joint.limit.lower
                maxval = joint.limit.upper

            if joint.mimic is not None:
                entry = {'parent': joint.mimic.joint_name }
                if joint.mimic.multiplier is not None:
                    entry['factor'] = joint.mimic.multiplier
                if joint.mimic.offset is not None:
                    entry['offset'] = joint.mimic.offset
                self.dependent_joints[name] = entry
                continue
            elif name in self.dependent_joints:
                continue
            elif minval > 0 or maxval < 0:
                zeroval = (maxval + minval)/2
            else:
                zeroval = 0

            joint = {'min':minval, 'max':maxval, 'zero':zeroval, 'position':zeroval, 'velocity':0}
            self.free_joints[name] = joint

        source_list = get_param("source_list", [])
        self.sources = []
        for source in source_list:
            self.sources.append(rospy.Subscriber(source, JointState, self.source_cb))

        self.pub = rospy.Publisher('joint_states', JointState, queue_size=100)

    def source_cb(self, msg):
        for i in range(len(msg.name)):
            name = msg.name[i]
            if name in self.free_joints:
                joint = self.free_joints[name]
                joint['position'] = msg.position[i]
                if len(msg.velocity) > i:
                    joint['velocity'] = msg.velocity[i]
                else:
                    joint['velocity'] = 0.0


    def loop(self):
        hz = get_param("rate", 50)
        r = rospy.Rate(hz)

        while not rospy.is_shutdown():
            msg = JointState()
            msg.header.stamp = rospy.Time.now()

            for (name, joint) in self.free_joints.items():
                msg.name.append(str(name))
                msg.position.append(joint['position'])
                msg.velocity.append(joint['velocity'])

            for (name, param) in self.dependent_joints.items():
                parent = param['parent']
                baseval = self.free_joints[parent]['position']
                value = baseval * param.get('factor', 1)

                msg.name.append(str(name))
                msg.position.append(value)
                msg.velocity.append(0.0)

            self.pub.publish(msg)

            r.sleep()

if __name__ == '__main__':
    try:
        rospy.init_node('joint_state_muxer')
        jsp = JointStateMuxer()
        jsp.loop()

    except rospy.ROSInterruptException:
        pass
